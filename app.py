import os
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# --- Ø¯Ø³ØªÙˆØ±Ø§Øª Ø±Ø¨Ø§Øª ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = await update.message.reply_text("Ø³Ù„Ø§Ù…! ðŸ‘‹ Ù…Ù† ÛŒÚ© Ø¨Ø§Øª Ù¾Ø§Ú©â€ŒÚ©Ù†Ù†Ø¯Ù‡ Ù‡Ø³ØªÙ….\nÙ¾ÛŒØ§Ù… Ø´Ù…Ø§ Ø¨Ø¹Ø¯ Ûµ Ø«Ø§Ù†ÛŒÙ‡ Ù¾Ø§Ú© Ù…ÛŒâ€ŒØ´ÙˆØ¯.")
    # Ù¾Ø§Ú© Ú©Ø±Ø¯Ù† Ù¾ÛŒØ§Ù… Ø¨Ø¹Ø¯ Ûµ Ø«Ø§Ù†ÛŒÙ‡
    await asyncio.sleep(5)
    await msg.delete()
    await update.message.delete()  # Ù¾ÛŒØ§Ù… Ú©Ø§Ø±Ø¨Ø± Ù‡Ù… Ù¾Ø§Ú© Ù…ÛŒâ€ŒØ´ÙˆØ¯

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.text:
        msg = await update.message.reply_text(update.message.text)
        await asyncio.sleep(5)
        await msg.delete()
        await update.message.delete()  # Ù¾ÛŒØ§Ù… Ú©Ø§Ø±Ø¨Ø± Ù‡Ù… Ù¾Ø§Ú© Ù…ÛŒâ€ŒØ´ÙˆØ¯

# --- Ø¨Ø±Ù†Ø§Ù…Ù‡ Ø§ØµÙ„ÛŒ ---
async def main() -> None:
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("Env var TELEGRAM_TOKEN ØªÙ†Ø¸ÛŒÙ… Ù†Ø´Ø¯Ù‡ Ø§Ø³Øª.")

    public_url = os.getenv("PUBLIC_URL")
    if not public_url:
        raise RuntimeError("Env var PUBLIC_URL ØªÙ†Ø¸ÛŒÙ… Ù†Ø´Ø¯Ù‡ Ø§Ø³Øª.")

    secret_path = os.getenv("WEBHOOK_SECRET", "super-secret-path")
    port = int(os.getenv("PORT", "8000"))

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Ø³Øª Ú©Ø±Ø¯Ù† webhook Ø¯Ø³ØªÛŒ (Render Ø®ÙˆØ¯Ø´ Port Ø±Ø§ Ù…Ø¯ÛŒØ±ÛŒØª Ù…ÛŒâ€ŒÚ©Ù†Ø¯)
    await app.bot.set_webhook(f"{public_url}/{secret_path}")

    # Ø§Ø¬Ø±Ø§ÛŒ webhook
    await app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=secret_path,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()  # Ø­Ù„ Ù…Ø´Ú©Ù„ event loop Ø¯Ø± Render
    import asyncio
    asyncio.run(main())
