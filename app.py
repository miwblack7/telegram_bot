# app.py
import os
import logging
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message and auto-delete it after 5 seconds."""
    msg = await update.message.reply_text(
        "Ø³Ù„Ø§Ù…! ðŸ‘‹ Ù…Ù† ÛŒÚ© Ø¨Ø§Øª Ø³Ø§Ø¯Ù‡ Ù‡Ø³ØªÙ….\nÙ¾ÛŒØ§Ù…â€ŒÙ‡Ø§ Ø¨Ø¹Ø¯ Ø§Ø² Ú†Ù†Ø¯ Ø«Ø§Ù†ÛŒÙ‡ Ù¾Ø§Ú© Ù…ÛŒâ€ŒØ´ÙˆÙ†Ø¯ ðŸ¤–"
    )
    await asyncio.sleep(5)
    await msg.delete()

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message and delete the bot reply after 5 seconds."""
    if update.message and update.message.text:
        msg = await update.message.reply_text(update.message.text)
        await asyncio.sleep(5)
        await msg.delete()

# --- Main ---

if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    PUBLIC_URL = os.getenv("PUBLIC_URL")
    WEBHOOK_PATH = os.getenv("WEBHOOK_SECRET", "super-secret-path")
    PORT = int(os.getenv("PORT", "8000"))

    if not TOKEN or not PUBLIC_URL:
        raise RuntimeError("Env vars TELEGRAM_TOKEN Ùˆ PUBLIC_URL Ø¨Ø§ÛŒØ¯ ØªÙ†Ø¸ÛŒÙ… Ø´ÙˆÙ†Ø¯!")

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # PTB Ø®ÙˆØ¯Ø´ loop Ø±Ø§ Ù…Ø¯ÛŒØ±ÛŒØª Ù…ÛŒâ€ŒÚ©Ù†Ø¯ØŒ Ù†ÛŒØ§Ø²ÛŒ Ø¨Ù‡ nest_asyncio Ù†ÛŒØ³Øª
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
        drop_pending_updates=True,
    )
