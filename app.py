import os
import logging
from fastapi import FastAPI, Request, HTTPException, Header
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ---- ØªÙ†Ø¸ÛŒÙ…Ø§Øª Ù…Ø­ÛŒØ· ----
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
PUBLIC_URL = os.getenv("PUBLIC_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---- Ø³Ø§Ø®Øª Ø§Ù¾Ù„ÛŒÚ©ÛŒØ´Ù† FastAPI ----
app = FastAPI()

# ---- Ø³Ø§Ø®Øª Ø±Ø¨Ø§Øª ----
bot_app = Application.builder().token(TOKEN).build()

# Ø¯Ø³ØªÙˆØ± Ø³Ø§Ø¯Ù‡ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ø³Ù„Ø§Ù… ðŸ‘‹ Ø±Ø¨Ø§Øª Ø¢Ù…Ø§Ø¯Ù‡â€ŒØ³Øª!")

bot_app.add_handler(CommandHandler("start", start))


# ---- Ø±ÙˆÛŒØ¯Ø§Ø¯ lifespan (Ø¬Ø§ÛŒÚ¯Ø²ÛŒÙ† startup/shutdown) ----
@app.on_event("lifespan")
async def lifespan(app: FastAPI):
    logger.info("ðŸ”¹ Bot starting...")
    await bot_app.initialize()
    await bot_app.start()
    await bot_app.bot.set_webhook(
        url=f"{PUBLIC_URL}/webhook/{WEBHOOK_SECRET}"
    )
    yield
    logger.info("ðŸ”¹ Bot shutting down...")
    await bot_app.stop()
    await bot_app.shutdown()


# ---- Ù…Ø³ÛŒØ± ØªØ³Øª ----
@app.get("/")
async def root():
    return {"status": "ok", "message": "Bot is live ðŸŽ‰"}


# ---- ÙˆØ¨Ù‡ÙˆÚ© ----
@app.post("/webhook/{token}")
async def webhook(request: Request, token: str, x_telegram_bot_api_secret_token: str = Header(None)):
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid token")
    if x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid secret token")

    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}
