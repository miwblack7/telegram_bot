import os
from datetime import datetime, timedelta
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.error import TelegramError
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

# ØªÙ†Ø¸ÛŒÙ…Ø§Øª Ù…Ø­ÛŒØ·ÛŒ
PUBLIC_URL = os.environ.get("PUBLIC_URL")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "secret123")

# Ø§ÛŒØ¬Ø§Ø¯ Ø§Ù¾ Flask
app = Flask(__name__)

# Ø§ÛŒØ¬Ø§Ø¯ Ø¨Ø§Øª
bot = Bot(token=TELEGRAM_TOKEN)

# Ø°Ø®ÛŒØ±Ù‡ Ù…ÙˆÙ‚Øª Ù¾ÛŒØ§Ù…â€ŒÙ‡Ø§ Ø¨Ø±Ø§ÛŒ Ù¾Ø§Ú©Ø³Ø§Ø²ÛŒ 48 Ø³Ø§Ø¹Øª
MESSAGES = []

# ----------------------
# Ù…Ø³ÛŒØ± ØªØ³Øª Ø³Ø±ÙˆØ±
@app.route("/")
def index():
    return "Bot is running!"

# ----------------------
# webhook ØªÙ„Ú¯Ø±Ø§Ù…
@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    handle_update(update)
    return "OK", 200

# ----------------------
# Ø¯Ø³ØªÙˆØ±Ø§Øª Ø¨Ø§Øª
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ðŸ’¡ Ú¯Ø²ÛŒÙ†Ù‡ Ø§ÙˆÙ„", callback_data="opt1")],
        [InlineKeyboardButton("âœ¨ Ú¯Ø²ÛŒÙ†Ù‡ Ø¯ÙˆÙ…", callback_data="opt2")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = await update.message.reply_text("Ø³Ù„Ø§Ù…! ÛŒÚ© Ú¯Ø²ÛŒÙ†Ù‡ Ø§Ù†ØªØ®Ø§Ø¨ Ú©Ù†:", reply_markup=reply_markup)
    
    # Ø°Ø®ÛŒØ±Ù‡ Ù¾ÛŒØ§Ù… Ø¨Ø±Ø§ÛŒ Ù¾Ø§Ú©Ø³Ø§Ø²ÛŒ
    MESSAGES.append({"chat_id": update.effective_chat.id, "message_id": msg.message_id, "date": datetime.utcnow()})

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"Ø´Ù…Ø§ {query.data} Ø±Ø§ Ø§Ù†ØªØ®Ø§Ø¨ Ú©Ø±Ø¯ÛŒØ¯.")

# ----------------------
# Ù¾Ø§Ú©Ø³Ø§Ø²ÛŒ Ù¾ÛŒØ§Ù…â€ŒÙ‡Ø§ÛŒ Ù‚Ø¯ÛŒÙ…ÛŒ (48 Ø³Ø§Ø¹Øª)
def cleanup_messages():
    global MESSAGES
    now = datetime.utcnow()
    to_delete = [m for m in MESSAGES if now - m["date"] > timedelta(hours=48)]
    for m in to_delete:
        try:
            bot.delete_message(chat_id=m["chat_id"], message_id=m["message_id"])
        except TelegramError:
            pass
    MESSAGES = [m for m in MESSAGES if now - m["date"] <= timedelta(hours=48)]

# ----------------------
# ØªØ§Ø¨Ø¹ Ø§ØµÙ„ÛŒ Ù…Ø¯ÛŒØ±ÛŒØª Ø¢Ù¾Ø¯ÛŒØª
def handle_update(update: Update):
    from telegram.ext import CallbackContext
    from asyncio import run
    # Ø§Ø¬Ø±Ø§ÛŒ Ø¯Ø³ØªÙˆØ± start
    if update.message and update.message.text == "/start":
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        run(start(update, CallbackContext(app)))
    elif update.callback_query:
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        run(button(update, CallbackContext(app)))
    
    # Ù¾Ø§Ú©Ø³Ø§Ø²ÛŒ Ù¾ÛŒØ§Ù…â€ŒÙ‡Ø§ÛŒ Ù‚Ø¯ÛŒÙ…ÛŒ
    cleanup_messages()

# ----------------------
# ØªÙ†Ø¸ÛŒÙ… webhook
@app.route("/set_webhook")
def set_webhook():
    url = f"{PUBLIC_URL}/{WEBHOOK_SECRET}"
    bot.delete_webhook()
    s = bot.set_webhook(url)
    return f"Webhook set: {s}"

# ----------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
